@page "/"
@inherits StoreXComponent<AppStore>
@inject IMediator  mediator
@inject IToastService toastService
@inject NavigationManager navigationManager

@if (viewModel.ProductsToDisplay.Count <= 0)
{
    <div>
        <h2>Loading...</h2>
    </div>
}
else
{
    if (Store.ShoppingCart.ProductsInCart.Count > 0)
    {
        <button class="btn btn-block btn-primary col-sm-6 mx-auto mb-2" @onclick="Checkout">Checkout</button>
    }
    <div class="row mb-5">
        @foreach (var product in viewModel.ProductsToDisplay)
        {
            <ProductListing Product="product"
                            InvalidProductAddedEventCallback="RemoveInvalidProduct"
                            ProductAddedEventCallback="DisplayProductAddedToCart"></ProductListing>
        }
        @if (!viewModel.ReachedEndOfProductList)
        {
            <button class="btn btn-block btn-outline-primary col-sm-6 mx-auto mt-2" @onclick="GetMoreProducts">More...</button>
        }
    </div>
}

@code {
    ShopViewModel viewModel = new ShopViewModel();


    async Task GetMoreProducts()
    {
        viewModel.Page++;
        var moreProducts = await mediator.Send(new ProductsInRangeQuery(viewModel.CurrentProductIndex, 2));
        await foreach (var product in moreProducts)
        {
            viewModel.ProductsToDisplay.Add(product);
            this.StateHasChanged();
        }
    }

    void RemoveInvalidProduct(Product product)
    {
        viewModel.ProductsToDisplay.Remove(product);
        viewModel.TotalProductCount--;
        toastService.ShowError($"{ product.Title} is not a valid product.");
        this.StateHasChanged();
    }

    void DisplayProductAddedToCart(Product product)
    {
        toastService.ShowSuccess($"{product.Title} added to cart.");
    }

    async void Checkout()
    {
        await CommitStoreXMutation(new CreateNewOrderMutation());
        navigationManager.NavigateTo("/checkout");
    }

    protected override async Task OnInitializedAsync()
    {
        var fetchedProducts = await mediator.Send(new ProductsInRangeQuery(0, 2));
        viewModel.TotalProductCount = await mediator.Send(new ProductCountQuery());

        await foreach (var product in fetchedProducts)
        {
            viewModel.ProductsToDisplay.Add(product);
            this.StateHasChanged();
        }
    }
}
